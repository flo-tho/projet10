**MyContent ‚Äì Recommandation d'articles (Content-Based + API Azure)**

________________________________________
Objectif
________________________________________
D√©velopper un syst√®me de recommandation d‚Äôarticles personnalis√©, accessible via une API Azure Function, et int√©gr√© dans une application Streamlit pour d√©monstration.
Approche : Content-Based Filtering bas√© sur les similarit√©s cosine entre articles.

________________________________________
Structure du projet
________________________________________
üìÅ mycontent-recommender/
‚îú‚îÄ‚îÄ app_interface.py                # Interface utilisateur Streamlit
‚îÇ
‚îú‚îÄ‚îÄ azure_function/
‚îÇ   ‚îú‚îÄ‚îÄ article_features.pkl     # Matrice articles/features (embeddings)
‚îÇ   ‚îú‚îÄ‚îÄ user_history.json    # Donn√©es d'interactions/historique des utilisateurs
‚îÇ   ‚îú‚îÄ‚îÄ local.settings.json
‚îÇ   ‚îú‚îÄ‚îÄ recommender.py           # Classe ContentBasedRecommender
‚îÇ   ‚îú‚îÄ‚îÄ recommender_function/
‚îÇ   ‚îÇ    ‚îú‚îÄ‚îÄ __init__.py    # Azure Function (API HTTP)
‚îÇ   ‚îÇ    ‚îî‚îÄ‚îÄfunction.json   # fichier de configuration de la fonction Azure
‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ P10_notebooks.ipynb #notebook d'analyse exploratoire et test des modeles
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md

________________________________________
Lancer l'application en local
________________________________________
1. Installer les d√©pendances
pip install -r requirements.txt

2. Lancer l‚ÄôAPI Azure Function localement
cd azure_function
func start
Cela d√©marre une API locale sur http://localhost:7071/api/recommend

3. Lancer l‚Äôapp Streamlit
Dans un autre terminal :
streamlit run app_interface.py


________________________________________
Fonctionnement du mod√®le
________________________________________
Recommandations g√©n√©r√©es par similarit√© cosine entre vecteurs d‚Äôarticles (article_features)

Pour un utilisateur donn√© : moyenne des similarit√©s des articles d√©j√† lus
Retourne un Top 5 articles personnalis√©s

________________________________________
Notebook
________________________________________
Plusieurs approches compar√©es :
> Popularit√©
> Content-based filtering (d√©finitif)
> Collaborative filtering (tests exploratoires)

________________________________________
Architecture technique
________________________________________
Azure Function (HTTP GET) : re√ßoit un user_id, renvoie 5 articles recommand√©s en JSON
Streamlit App : interface utilisateur

________________________________________
Prochaines √©tapes
________________________________________
Blob Storage : stockage des articles et des embeddings
Cosmos DB : enregistrement des interactions utilisateur
Meilleure gestion des utilisateurs ‚Äúcold-start‚Äù (nouveaux)
Ajout de feedback utilisateur + mise √† jour auto des embeddings
Int√©gration pipeline de r√©entra√Ænement